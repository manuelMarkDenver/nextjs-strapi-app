# Stage 1: Build the application
FROM node:16-alpine as build

# Install build dependencies
RUN apk add --no-cache --virtual .build-deps build-base gcc autoconf automake zlib-dev libpng-dev vips-dev

# Set Node.js environment
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Set working directory for the build stage
WORKDIR /opt/

# Install production dependencies
COPY package.json package-lock.json ./
RUN npm config set network-timeout 600000 -g && npm ci --only=production

# Add production node_modules to PATH
ENV PATH /opt/node_modules/.bin:$PATH

# Set working directory for the app
WORKDIR /opt/app

# Copy application source code
COPY . .

# Build the application
RUN npm run build

# Stage 2: Create the final production image
FROM node:16-alpine

# Install runtime dependencies
RUN apk add --no-cache vips-dev

# Set Node.js environment
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Set working directory for the final image
WORKDIR /opt/

# Copy production node_modules from the build stage
COPY --from=build /opt/node_modules ./node_modules

# Set working directory for the app in the final image
WORKDIR /opt/app

# Copy the built application from the build stage
COPY --from=build /opt/app ./

# Set proper ownership for the app directory
RUN chown -R node:node /opt/app

# Switch to a non-root user
USER node

# Expose the desired port (1337 in this case)
EXPOSE 1337

# Start the application
CMD ["npm", "run", "start"]
